import { faker } from "@faker-js/faker";

//การใช้ factory แบบง่ายและตรงตัว และมีการใช้ static

export class TestingFactory {
    
    // ใช้ static ในฟังก์ชันนี้เพราะการสร้างข้อมูลไม่ต้องพึ่งพาข้อมูลจากอินสแตนซ์ของคลาส 
    // เราสามารถเรียกใช้งานได้โดยตรงผ่าน TestingFactory.createTesting() โดยไม่ต้องสร้างอินสแตนซ์ใหม่
    static createTesting() {
        const value = faker.person.firstName(); // สร้างชื่อแรก (first name) ปลอม
        return { value };
    }

    // ฟังก์ชันนี้ก็ใช้ static ด้วยเหตุผลเดียวกัน ไม่ต้องพึ่งพาอินสแตนซ์ใดๆ
    // สามารถเรียกใช้งานได้ผ่าน TestingFactory.createTestings(count)
    static createTestings(count: number) {
        // สร้าง array ข้อมูล testing ตามจำนวนที่กำหนด
        return Array.from({ length: count }, () => TestingFactory.createTesting());
    }


    //## รู้จักกับ instance ก่อน 
    /* 
    ลองนึกถึงว่า คลาส (class) คือ แบบแปลน ของบ้าน ส่วน อินสแตนซ์ (instance) คือ บ้านจริง ที่เราสร้างขึ้นตามแบบแปลนนั้น
        - แบบแปลนบ้าน หรือคลาส บอกว่าจะมีห้องนอน ห้องครัว ประตูหน้าต่างอย่างไรบ้าง แต่แบบแปลนนี้ไม่ใช่บ้านจริงๆ
        - เมื่อเราสร้างบ้านตามแบบแปลนขึ้นมาจริงๆ บ้านที่สร้างขึ้นนี้ก็คืออินสแตนซ์ของแบบแปลนนั้น
        #ตัวอย่างโค้ด
        ##  const testing = new TestingFactory();  ##
            -  TestingFactory คือคลาสหรือแบบแปลนที่บอกว่าจะสร้างวัตถุแบบไหน
            -  testing คืออินสแตนซ์ของ TestingFactory ซึ่งสร้างขึ้นจริงจากคลาสนั้น
    */

    // ##ตัวอย่างแบบ เรียกใช้งานโดยตรง หรือ มี static
       /*   const testing = TestingFactory.createTesting();
            const testings = TestingFactory.createTestings(10);  */
    
    // ต้องสร้าง instance ก่อนใช้งาน หรือ ไม่มี static
        /*  const testingFactory = new TestingFactory();
            const testing = testingFactory.createTesting();
            const testings = testingFactory.createTestings(10); */

}


/*  
ลองนึกภาพว่า **คลาส** (class) คือ **แบบแปลน** หรือ **แม่พิมพ์** ในการสร้างสิ่งของบางอย่าง เช่น การสร้างรถยนต์
- แบบแปลนนี้บอกว่าจะมีประตู กี่บาน มีล้อกี่ล้อ มีสีอะไรได้บ้าง แต่ตัวแบบแปลนเองไม่ใช่รถจริงๆ นะครับ
เมื่อเราต้องการรถยนต์จริงๆ เราจะสร้าง "รถยนต์" จากแบบแปลนขึ้นมา ซึ่งรถคันนี้คือสิ่งที่เรียกว่า **อินสแตนซ์ (instance)**
- ถ้าแบบแปลนคือคลาส (class) การสร้างรถยนต์จริงๆ จากแบบแปลนก็เหมือนกับการสร้างอินสแตนซ์ (instance) ของคลาสนั้นนั่นเอง
-------------------------------------------------------------------------------
### การใช้ `static` ในการสร้างฟังก์ชันที่ไม่ต้องการอินสแตนซ์
ในตัวอย่างโค้ด `TestingFactory` ของเรา ถ้าเปรียบเทียบกับการสร้างรถยนต์:
- `static` เหมือนคู่มือการใช้งานรถที่เรา **ไม่ต้องมีรถจริงๆ ก็อ่านและใช้ได้เลย** เพียงแค่เปิดอ่านก็รู้วิธีการใช้งาน 
   เพราะไม่ได้ขึ้นอยู่กับการมีรถคันใดคันหนึ่งอยู่
-  ฟังก์ชันที่ไม่มี `static` จะเหมือนการใช้เครื่องมือที่ติดมากับรถยนต์ (เช่น การใช้ GPS หรือระบบเสียงของรถ) 
   ซึ่งเราจำเป็นต้องมีรถคันจริงก่อนจึงจะใช้ระบบนี้ได้

        ในโค้ดนี้ เราใช้ `static` กับฟังก์ชัน `createTesting()` และ `createTestings()` เพราะเป็นฟังก์ชันที่ 
        #ไม่ต้องการรถยนต์จริงๆ (หรืออินสแตนซ์)** เพื่อใช้งาน มันเหมือนกับคู่มือที่เราหยิบใช้ได้ทันทีผ่าน `TestingFactory`
*/

